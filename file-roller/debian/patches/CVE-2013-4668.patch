From 1e73fce51545a067767b5ba84202e73175ad0672 Mon Sep 17 00:00:00 2001
From: Paolo Bacchilega <paobac@src.gnome.org>
Date: Mon, 27 May 2013 19:18:21 +0000
Subject: libarchive: sanitize filenames before extracting

---
Index: file-roller-3.6.3/src/fr-archive-libarchive.c
===================================================================
--- file-roller-3.6.3.orig/src/fr-archive-libarchive.c	2013-07-12 12:03:01.898952096 -0400
+++ file-roller-3.6.3/src/fr-archive-libarchive.c	2013-07-12 12:03:01.886952096 -0400
@@ -504,6 +504,7 @@
 	while ((r = archive_read_next_header (a, &entry)) == ARCHIVE_OK) {
 		const char    *pathname;
 		char          *fullpath;
+		const char    *relative_path;
 		GFile         *file;
 		GFile         *parent;
 		GOutputStream *ostream;
@@ -523,7 +524,12 @@
 		}
 
 		fullpath = (*pathname == '/') ? g_strdup (pathname) : g_strconcat ("/", pathname, NULL);
-		file = g_file_get_child (extract_data->destination, _g_path_get_relative_basename (fullpath, extract_data->base_dir, extract_data->junk_paths));
+		relative_path = _g_path_get_relative_basename_safe (fullpath, extract_data->base_dir, extract_data->junk_paths);
+		if (relative_path == NULL) {
+			archive_read_data_skip (a);
+			continue;
+		}
+		file = g_file_get_child (extract_data->destination, relative_path);
 
 		/* honor the skip_older and overwrite options */
 
@@ -607,14 +613,22 @@
 
 			linkname = archive_entry_hardlink (entry);
 			if (linkname != NULL) {
-				char  *link_fullpath;
-				GFile *link_file;
-				char  *oldname;
-				char  *newname;
-				int    r;
+				char        *link_fullpath;
+				const char  *relative_path;
+				GFile       *link_file;
+				char        *oldname;
+				char        *newname;
+				int          r;
 
 				link_fullpath = (*linkname == '/') ? g_strdup (linkname) : g_strconcat ("/", linkname, NULL);
-				link_file = g_file_get_child (extract_data->destination, _g_path_get_relative_basename (link_fullpath, extract_data->base_dir, extract_data->junk_paths));
+				relative_path = _g_path_get_relative_basename_safe (link_fullpath, extract_data->base_dir, extract_data->junk_paths);
+				if (relative_path == NULL) {
+					g_free (link_fullpath);
+					archive_read_data_skip (a);
+					continue;
+				}
+
+				link_file = g_file_get_child (extract_data->destination, relative_path);
 				oldname = g_file_get_path (link_file);
 				newname = g_file_get_path (file);
 
Index: file-roller-3.6.3/src/fr-window.c
===================================================================
--- file-roller-3.6.3.orig/src/fr-window.c	2013-07-12 12:03:01.898952096 -0400
+++ file-roller-3.6.3/src/fr-window.c	2013-07-12 12:03:01.890952096 -0400
@@ -6667,26 +6667,35 @@
 static void
 _fr_window_ask_overwrite_dialog (OverwriteData *odata)
 {
+	gboolean perform_extraction = TRUE;
+
 	if ((odata->edata->overwrite == FR_OVERWRITE_ASK) && (odata->current_file != NULL)) {
 		const char *base_name;
 		GFile      *destination;
 
-		base_name = _g_path_get_relative_basename ((char *) odata->current_file->data, odata->edata->base_dir, odata->edata->junk_paths);
-		destination = g_file_get_child (odata->edata->destination, base_name);
-		g_file_query_info_async (destination,
-					 G_FILE_ATTRIBUTE_STANDARD_TYPE "," G_FILE_ATTRIBUTE_STANDARD_NAME "," G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME,
-					 G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,
-					 G_PRIORITY_DEFAULT,
-					 odata->window->priv->cancellable,
-					 query_info_ready_for_overwrite_dialog_cb,
-					 odata);
+		base_name = _g_path_get_relative_basename_safe ((char *) odata->current_file->data, odata->edata->base_dir, odata->edata->junk_paths);
+		if (base_name != NULL) {
+			destination = g_file_get_child (odata->edata->destination, base_name);
+			g_file_query_info_async (destination,
+						 G_FILE_ATTRIBUTE_STANDARD_TYPE "," G_FILE_ATTRIBUTE_STANDARD_NAME "," G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME,
+						 G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,
+						 G_PRIORITY_DEFAULT,
+						 odata->window->priv->cancellable,
+						 query_info_ready_for_overwrite_dialog_cb,
+						 odata);
 
-		g_object_unref (destination);
+			g_object_unref (destination);
 
-		return;
+			return;
+		}
+		else
+			perform_extraction = FALSE;
 	}
 
-	if (odata->edata->file_list != NULL) {
+	if (odata->edata->file_list == NULL)
+		perform_extraction = FALSE;
+
+	if (perform_extraction) {
 		/* speed optimization: passing NULL when extracting all the
 		 * files is faster if the command supports the
 		 * propCanExtractAll property. */
Index: file-roller-3.6.3/src/glib-utils.c
===================================================================
--- file-roller-3.6.3.orig/src/glib-utils.c	2013-07-12 12:03:01.898952096 -0400
+++ file-roller-3.6.3/src/glib-utils.c	2013-07-12 12:03:01.890952096 -0400
@@ -984,6 +984,46 @@
 }
 
 
+#define ISDOT(c) ((c) == '.')
+#define ISSLASH(c) ((c) == '/')
+
+
+static const char *
+sanitize_filename (const char *file_name)
+{
+	size_t      prefix_len;
+	char const *p;
+
+	prefix_len = 0;
+	for (p = file_name; *p; ) {
+		if (ISDOT (p[0]) && ISDOT (p[1]) && (ISSLASH (p[2]) || !p[2]))
+			prefix_len = p + 2 - file_name;
+
+		do {
+			char c = *p++;
+			if (ISSLASH (c))
+				break;
+		}
+		while (*p);
+	}
+
+	p = file_name + prefix_len;
+	while (ISSLASH (*p))
+		p++;
+
+	return p;
+}
+
+
+const char *
+_g_path_get_relative_basename_safe (const char *path,
+				    const char *base_dir,
+				    gboolean    junk_paths)
+{
+	return sanitize_filename (_g_path_get_relative_basename (path, base_dir, junk_paths));
+}
+
+
 gboolean
 _g_filename_is_hidden (const gchar *name)
 {
Index: file-roller-3.6.3/src/glib-utils.h
===================================================================
--- file-roller-3.6.3.orig/src/glib-utils.h	2013-07-12 12:03:01.898952096 -0400
+++ file-roller-3.6.3/src/glib-utils.h	2013-07-12 12:03:01.894952096 -0400
@@ -138,6 +138,10 @@
 const char *        _g_path_get_relative_basename  (const char          *path,
 						    const char          *base_dir,
 						    gboolean             junk_paths);
+const char *        _g_path_get_relative_basename_safe
+						   (const char          *path,
+						    const char          *base_dir,
+						    gboolean             junk_paths);
 gboolean            _g_filename_is_hidden          (const char          *name);
 const char *        _g_filename_get_extension      (const char          *filename);
 gboolean            _g_filename_has_extension      (const char          *filename,
